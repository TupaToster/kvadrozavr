<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_snus_8h" xml:lang="en-US">
<title>snus.h File Reference</title>
<indexterm><primary>snus.h</primary></indexterm>
<para>

<para>A header with all funcs prototypes and constants. </para>
 
</para>
<programlisting>#include &lt;stdio.h&gt;
#include &lt;TXlib.h&gt;
#include &lt;windows.h&gt;
#include &lt;math.h&gt;
</programlisting><simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_snus_8h_1a6ebf6899d6c1c8b7b9d09be872c05aae">EPS</link>   1e-7</para>

<para>A constant that specifies what a really smol number is. </para>
</listitem>
            <listitem><para>#define <link linkend="_snus_8h_1aabf4f709c8199e41cf279c77112345fe">MAX_LEN</link>   1000</para>

<para>A constant that specifies max length of an input string. </para>
</listitem>
            <listitem><para>#define <link linkend="_snus_8h_1a011ae48ddd36934a88e163cf739e1d7e">ASRT</link>(cnd)</para>

<para>Asserts the condition but does not abort whole program. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955">roots_amount</link> { <link linkend="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955a2e6059d72d8fde88f3127eb147e4eff8">INF</link> = -1
, <link linkend="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955ae117e3533122c80b262257b49b21cddf">ZERO</link> = 0
, <link linkend="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955a7a725f13af144bdef532d0389ba75e0d">ONE</link> = 1
, <link linkend="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955a0e793500a63ffa575b9b712ca3bc9851">TWO</link> = 2
 }</para>

<para>Constants that specify amounts of roots. </para>
</listitem>
            <listitem><para>enum <link linkend="_snus_8h_1ae6e91702a8449c6fd46015ad5f51d845">err_input</link> { <link linkend="_snus_8h_1ae6e91702a8449c6fd46015ad5f51d845a2bc49ec37d6a5715dd23e85f1ff5bb59">OK</link> = 1
, <link linkend="_snus_8h_1ae6e91702a8449c6fd46015ad5f51d845a8a28e3899080dfde96d8a19987703842">STDIN_EMPTY_ERROR</link> = 0
 }</para>

<para>Constants to specify errors of input. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_snus_8h_1a02cbc2defee0f3d84ee8067d45732176">comp_doubles</link> (double a, double b)</para>

<para>Compares two double variables. </para>
</listitem>
            <listitem><para>enum <link linkend="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955">roots_amount</link> <link linkend="_snus_8h_1a98fed8725d0e188dde87f39168836ad2">solve_equation</link> (double a, double b, double c, double *x1, double *x2)</para>

<para>Chooses a method of solution. </para>
</listitem>
            <listitem><para>enum <link linkend="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955">roots_amount</link> <link linkend="_snus_8h_1a72c9b1fd8efbda71659c7e47ce992fe8">solve_square_case</link> (double a, double b, double c, double *x1, double *x2)</para>

<para>Solves a quadratic equation. </para>
</listitem>
            <listitem><para>enum <link linkend="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955">roots_amount</link> <link linkend="_snus_8h_1aaea2d0f9b4155a87659c7a2fcc6f8ea7">solve_linear_case</link> (double b, double c, double *x1)</para>

<para>Solves a linear equation. </para>
</listitem>
            <listitem><para>enum <link linkend="_snus_8h_1ae6e91702a8449c6fd46015ad5f51d845">err_input</link> <link linkend="_snus_8h_1a13d2c2714fbba2c6e3ed23f468305658">input</link> (double *a, double *b, double *c)</para>

<para>Takes input from user. </para>
</listitem>
            <listitem><para>void <link linkend="_snus_8h_1a7fb618b9f5ac5f07be66734e0a74bc31">output</link> (enum <link linkend="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955">roots_amount</link> root_am, double *x1, double *x2)</para>

<para>Creates output. </para>
</listitem>
            <listitem><para>void <link linkend="_snus_8h_1a8e55f3e436b0268b26875038536f8e53">unit_test</link> ()</para>

<para>Tests correctness of work of key functions. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A header with all funcs prototypes and constants. </para>

<para>This thing contains all functions&apos; prototypes and constants needed for work of a program </para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_snus_8h_1a011ae48ddd36934a88e163cf739e1d7e"/>    <section>
    <title>ASRT</title>
<indexterm><primary>ASRT</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>ASRT</secondary></indexterm>
<para><computeroutput>#define ASRT( cnd)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!(cnd))&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;txSetColor(TX_RED);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;<emphasis role="stringliteral">&quot;Assertion&#32;failed:&#32;%s&#32;\n&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;in&#32;file&#32;%s\n&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;function&#32;%s\n&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;line&#32;%d\n&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;#cnd,&#32;__FILE__,&#32;__PRETTY_FUNCTION__,&#32;__LINE__);&#32;\
&#32;&#32;&#32;&#32;txSetColor(TX_WHITE);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
}
</programlisting><para>

<para>Asserts the condition but does not abort whole program. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>cnd</entry>
                                <entry>
<para>- an expression with a bool return type</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This fucntion is used to let user now if a bool type expression has a different value than expected </para>
<para>
Definition at line 32 of file snus.h.</para>
    </section><anchor xml:id="_snus_8h_1a6ebf6899d6c1c8b7b9d09be872c05aae"/>    <section>
    <title>EPS</title>
<indexterm><primary>EPS</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>EPS</secondary></indexterm>
<para><computeroutput>#define EPS   1e-7</computeroutput></para><para>

<para>A constant that specifies what a really smol number is. </para>
</para>
<para>
Definition at line 16 of file snus.h.</para>
    </section><anchor xml:id="_snus_8h_1aabf4f709c8199e41cf279c77112345fe"/>    <section>
    <title>MAX_LEN</title>
<indexterm><primary>MAX_LEN</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>MAX_LEN</secondary></indexterm>
<para><computeroutput>#define MAX_LEN   1000</computeroutput></para><para>

<para>A constant that specifies max length of an input string. </para>
</para>
<para>
Definition at line 22 of file snus.h.</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_snus_8h_1ae6e91702a8449c6fd46015ad5f51d845"/>    <section>
    <title>err_input</title>
<indexterm><primary>err_input</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>err_input</secondary></indexterm>
<para><computeroutput>enum <link linkend="_snus_8h_1ae6e91702a8449c6fd46015ad5f51d845">err_input</link></computeroutput></para><para>

<para>Constants to specify errors of input. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>OK</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>OK</secondary></indexterm>
<anchor xml:id="_snus_8h_1ae6e91702a8449c6fd46015ad5f51d845a2bc49ec37d6a5715dd23e85f1ff5bb59"/>OK</entry><entry></entry></row><row><entry><indexterm><primary>STDIN_EMPTY_ERROR</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>STDIN_EMPTY_ERROR</secondary></indexterm>
<anchor xml:id="_snus_8h_1ae6e91702a8449c6fd46015ad5f51d845a8a28e3899080dfde96d8a19987703842"/>STDIN_EMPTY_ERROR</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 56 of file snus.h.</para>
    </section><anchor xml:id="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955"/>    <section>
    <title>roots_amount</title>
<indexterm><primary>roots_amount</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>roots_amount</secondary></indexterm>
<para><computeroutput>enum <link linkend="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955">roots_amount</link></computeroutput></para><para>

<para>Constants that specify amounts of roots. </para>
</para>

<para>This set of constants is used to tell the output function how many roots it has to print. Also used in solve_equation, solve_square_case and solve_linear_case as a return value with the same purposes. </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>INF</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>INF</secondary></indexterm>
<anchor xml:id="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955a2e6059d72d8fde88f3127eb147e4eff8"/>INF</entry><entry></entry></row><row><entry><indexterm><primary>ZERO</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>ZERO</secondary></indexterm>
<anchor xml:id="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955ae117e3533122c80b262257b49b21cddf"/>ZERO</entry><entry></entry></row><row><entry><indexterm><primary>ONE</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>ONE</secondary></indexterm>
<anchor xml:id="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955a7a725f13af144bdef532d0389ba75e0d"/>ONE</entry><entry></entry></row><row><entry><indexterm><primary>TWO</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>TWO</secondary></indexterm>
<anchor xml:id="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955a0e793500a63ffa575b9b712ca3bc9851"/>TWO</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 50 of file snus.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_snus_8h_1a02cbc2defee0f3d84ee8067d45732176"/>    <section>
    <title>comp_doubles()</title>
<indexterm><primary>comp_doubles</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>comp_doubles</secondary></indexterm>
<para><computeroutput>bool comp_doubles (double a, double b)</computeroutput></para><para>

<para>Compares two double variables. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a, b</entry>
                                <entry>
<para>- two numbers for comparison </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true - if |a - b| is less then EPS </para>

<para>false - if |a - b| is more then EPS</para>
</formalpara>
This function is used to compare two double type variables with a precision of EPS </para>
<para>
Definition at line 12 of file 4k_mg.cpp.</para>
    </section><anchor xml:id="_snus_8h_1a13d2c2714fbba2c6e3ed23f468305658"/>    <section>
    <title>input()</title>
<indexterm><primary>input</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>input</secondary></indexterm>
<para><computeroutput>enum <link linkend="_snus_8h_1ae6e91702a8449c6fd46015ad5f51d845">err_input</link> input (double * a, double * b, double * c)</computeroutput></para><para>

<para>Takes input from user. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a, b, c</entry>
                                <entry>
<para>- pointers to variables that will contain coefficients of\ an equation of type: a * x^2 + b * x + c = 0</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function is used to take input of coefficients of an equation. </para>
<para>
Definition at line 12 of file 4k_mg.cpp.</para>
    </section><anchor xml:id="_snus_8h_1a7fb618b9f5ac5f07be66734e0a74bc31"/>    <section>
    <title>output()</title>
<indexterm><primary>output</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>output</secondary></indexterm>
<para><computeroutput>void output (enum <link linkend="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955">roots_amount</link> root_am, double * x1, double * x2)</computeroutput></para><para>

<para>Creates output. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>root_am</entry>
                                <entry>
<para>- a roots_amount that specifies an amount of roots </para>
</entry>
                            </row>
                            <row>
                                <entry>x1, x2</entry>
                                <entry>
<para>pointers to roots that have been found</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function is used to generate output based on amount of roots (specified by root_am) and to print them </para>
<para>
Definition at line 90 of file 4k_mg.cpp.</para>
    </section><anchor xml:id="_snus_8h_1a98fed8725d0e188dde87f39168836ad2"/>    <section>
    <title>solve_equation()</title>
<indexterm><primary>solve_equation</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>solve_equation</secondary></indexterm>
<para><computeroutput>enum <link linkend="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955">roots_amount</link> solve_equation (double a, double b, double c, double * x1, double * x2)</computeroutput></para><para>

<para>Chooses a method of solution. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a, b, c</entry>
                                <entry>
<para>- coefficients of a quadratic equation of type: a * x^2 + b * x + c = 0 </para>
</entry>
                            </row>
                            <row>
                                <entry>x1, x2</entry>
                                <entry>
<para>- pointers to variables that will contain found roots </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>roots_amount type constant that specifies amount of roots found</para>
</formalpara>
This function is used to choose a calculation method depending on &quot;a&quot; parameter. If &quot;a&quot; is equal to 0 than equation is linear and solvelin function is used In other cases a solvesq function is used </para>
<para>
Definition at line 12 of file 4k_mg.cpp.</para>
    </section><anchor xml:id="_snus_8h_1aaea2d0f9b4155a87659c7a2fcc6f8ea7"/>    <section>
    <title>solve_linear_case()</title>
<indexterm><primary>solve_linear_case</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>solve_linear_case</secondary></indexterm>
<para><computeroutput>enum <link linkend="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955">roots_amount</link> solve_linear_case (double b, double c, double * x1)</computeroutput></para><para>

<para>Solves a linear equation. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>b, c</entry>
                                <entry>
<para>- coefficients of a linear function of type: b * x + c = 0 </para>
</entry>
                            </row>
                            <row>
                                <entry>x1</entry>
                                <entry>
<para>- pointer to a variable that will contain a found root </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>roots_amount type constant that specifies amount of roots found</para>
</formalpara>
This function is used to find all real roots of a linear equation and specify the amount of roots found </para>
<para>
Definition at line 12 of file 4k_mg.cpp.</para>
    </section><anchor xml:id="_snus_8h_1a72c9b1fd8efbda71659c7e47ce992fe8"/>    <section>
    <title>solve_square_case()</title>
<indexterm><primary>solve_square_case</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>solve_square_case</secondary></indexterm>
<para><computeroutput>enum <link linkend="_snus_8h_1a46d3fddc9acc9207ec5f4dd340f5b955">roots_amount</link> solve_square_case (double a, double b, double c, double * x1, double * x2)</computeroutput></para><para>

<para>Solves a quadratic equation. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a, b, c</entry>
                                <entry>
<para>- coefficients of a quadratic equation of type: a * x^2 + b * x + c = 0 </para>
</entry>
                            </row>
                            <row>
                                <entry>x1, x2</entry>
                                <entry>
<para>- pointers to variables that will contain found roots </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>roots_amount type constant that specifies amount of roots found </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>This</entry>
                                <entry>
<para>function does not operate with &quot;a&quot; equal to zero </para>
</entry>
                            </row>
                            <row>
                                <entry>(this</entry>
                                <entry>
<para>issue is solved in solve_equation function)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function is used to find all real roots of a quadratic equation and specify the amount of roots found </para>
<para>
Definition at line 12 of file 4k_mg.cpp.</para>
    </section><anchor xml:id="_snus_8h_1a8e55f3e436b0268b26875038536f8e53"/>    <section>
    <title>unit_test()</title>
<indexterm><primary>unit_test</primary><secondary>snus.h</secondary></indexterm>
<indexterm><primary>snus.h</primary><secondary>unit_test</secondary></indexterm>
<para><computeroutput>void unit_test ( )</computeroutput></para><para>

<para>Tests correctness of work of key functions. </para>
</para>

<para>This function is used to detect mistakes in functions solve_equation, solve_linear_case, solve_square_case and comp_doubles </para>
<para>
Definition at line 122 of file 4k_mg.cpp.</para>
</section>
</section>
</section>
